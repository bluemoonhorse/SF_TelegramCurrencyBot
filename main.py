import pyTelegramBotAPI
from pyTelegramBotAPI import telebot
from extensions import ConvertionException, CryptoConverter, NegativeValue, NotNumber, is_float
from config import TOKEN, KEYS

bot = telebot.TeleBot(TOKEN)



# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–æ–º–∞–Ω–¥—ã '/start' or '/help'.
@bot.message_handler(commands=['start', 'help'])
def get_help(message):
    guide_message = "Press /values to fetch list of tickers. " \
                    "\n<ticker 1> <ticker 2> <1234>" \
                    "\nBTC USD 1 = ????"
    bot.send_message(message.chat.id, guide_message)


@bot.message_handler(commands=['values'])
def get_values(message):
    text = "–¢–∏–∫–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç:"
    for key in KEYS.keys():
        text = '\n'.join((text, key,))
    bot.reply_to(message, text)


@bot.message_handler(content_types=['text', ])
def convert(message: telebot.types.Message):
    try:
        values = message.text.split(" ")
        # —Å–∞–º–∞—è –∂–∏—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –º–µ–π–Ω —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∑ üò≠üò≠üò≠üò≠üò≠
        if len(values) != 3:
            # bot.reply_to(message, "I need 3 parameters")
            raise ConvertionException("I need 3 parameters")
        base, quote, amount = values


        if float(amount) <= 0:
            # –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å error message –≤ try-except-raise("say stuff") —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å  üò≠üò≠üò≠üò≠üò≠
            # –ø–æ–¥—Å–∫–∞–∑–∞–ª–∏ –≤ —Å–∫—Ä–∏–Ω–∫–∞—Å—Ç–µ üò≠
            # bot.reply_to(message, "Number should be positive!")
            raise NegativeValue()
        if not is_float(amount):

            # bot.reply_to(message, f'I need number: {amount}')
            #raise ValueError(f'I need number. Also, thats on you!')
            raise NotNumber(f'Not a number')
        if base == quote:
            # 1 xmr = 1 xmr! üçä
            # bot.reply_to(message, "1 XMR = 1 XMR! Those are the same currencies!")
            raise ConvertionException("1 XMR = 1 XMR! Those are the same currencies!")
        try:
            base = KEYS[base]
        except KeyError:
            # bot.reply_to(message, f'Currency check has failed: {base}')
            raise ConvertionException(f'Currency check has failed for base: {base}')
        try:
            quote = KEYS[quote]
        except KeyError:
            # bot.reply_to(message, f'Currency check has failed: {quote}')
            raise ConvertionException(f'Currency check has failed for quote : {quote}')

        total_base = CryptoConverter.get_price(base, quote, amount)
        text = f'Price of {amount} {base} in {quote} : {total_base}'
        bot.reply_to(message, text)
    except ConvertionException as e:
        bot.reply_to(message, f'User error:\n{e}')
    except NegativeValue:
        bot.reply_to(message, "User error.\nNumber should be positive!")
    except NotNumber:
        bot.reply_to(message, f'User error.\nI need number.')
    except Exception as e:
        bot.reply_to(message, f'Bot error:\n{e}')

    # –∏–¥–µ—è –Ω–∞ –±—É–¥—É—â–µ–µ –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ–π –∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å —Ç–∏–∫–µ—Ä—ã –≤–º–µ—Å—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ KEYS
    # r2 = requests.get(f'https://min-api.cryptocompare.com/data/price?fsym={base}&tsyms={quote}&api_key={CRYPTO_API}')
    # text2 = json.loads(r2.content)[quote]
    # bot.reply_to(message, text2)


# –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ —Å–∫–∏–ª—Ñ–∞–∫—Ç–æ—Ä–∏ –Ω–æ –ø—Ä–∏–≥–æ–¥–∏–ª–æ—Å—å
@bot.message_handler(content_types=['photo', 'document', 'audio'])
def say_lmao(message: telebot.types.Message):
    bot.reply_to(message, 'https://www.getmonero.org')


# bot.polling(none_stop=True)
bot.infinity_polling()
