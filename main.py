import pyTelegramBotAPI
from pyTelegramBotAPI import telebot
from extensions import ConvertionException, CryptoConverter
from config import TOKEN, KEYS




bot = telebot.TeleBot(TOKEN)
guide_message = "Press /values to fetch list of tickers. " \
                "\n<ticker 1> <ticker 2> <1234>" \
                "\nBTC USD 1 = ????"


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–æ–º–∞–Ω–¥—ã '/start' or '/help'.


@bot.message_handler(commands=['start', 'help'])
def get_help(message):
    bot.send_message(message.chat.id, guide_message)


@bot.message_handler(commands=['values'])
def get_values(message):
    text = "–¢–∏–∫–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç:"
    for key in KEYS.keys():
        text = '\n'.join((text, key,))
    bot.reply_to(message, text)

#–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –æ–ø–∏—Å–∞—Ç—å –∫–ª–∞—Å—Å —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –º–µ—Ç–æ–¥–æ–º get_price(),
#–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: –∏–º—è –≤–∞–ª—é—Ç—ã, —Ü–µ–Ω—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å, ‚Äî base, –∏–º—è –≤–∞–ª—é—Ç—ã,
#—Ü–µ–Ω—É –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å, ‚Äî quote, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ–π –≤–∞–ª—é—Ç—ã ‚Äî amount –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤ –≤–∞–ª—é—Ç–µ.+



@bot.message_handler(content_types=['text', ])
def convert(message: telebot.types.Message):
    values = message.text.split(" ")

    if len(values) != 3:
        bot.reply_to(message, "I need 3 parameters")
        raise ConvertionException("I need 3 parameters")

    base, quote, amount = values

    if float(amount) <= 0:
        # –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å error message –≤ try-except-raise("say stuff") —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å  üò≠üò≠üò≠üò≠üò≠
        bot.reply_to(message, "Number should be positive!")
        raise ConvertionException("Number should be positive!")
    if base == quote:
        # 1 xmr = 1 xmr! üçä
        bot.reply_to(message, "1 XMR = 1 XMR! Those are the same currencies!")
        raise ConvertionException("1 XMR = 1 XMR! Those are the same currencies!")
    try:
        base = KEYS[base]
    except KeyError:
        bot.reply_to(message, f'Currency check has failed: {base}')
        raise ConvertionException(f'Currency check has failed: {base}')
    try:
        quote = KEYS[quote]
    except KeyError:
        bot.reply_to(message, f'Currency check has failed: {quote}')
        raise ConvertionException(f'Currency check has failed: {quote}')
    try:
        amount = float(amount)
    except ValueError:
        bot.reply_to(message, f'I need number: {amount}')
        raise ConvertionException(f'I need number: {amount}')

    total_base = CryptoConverter.get_price(base, quote, amount)
    text = f'Price of {amount} {base} in {quote} : {total_base}'
    bot.reply_to(message, text)
    # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –Ω–∞ –±—É–¥—É—â–µ–µ –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ–π
    # r2 = requests.get(f'https://min-api.cryptocompare.com/data/price?fsym={base}&tsyms={quote}&api_key={CRYPTO_API}')
    # text2 = json.loads(r2.content)[quote]
    # bot.reply_to(message, text2)


#–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ —Å–∫–∏–ª—Ñ–∞–∫—Ç–æ—Ä–∏ –Ω–æ –ø—Ä–∏–≥–æ–¥–∏–ª–æ—Å—å
@bot.message_handler(content_types=['photo', 'document', 'audio'])
def say_lmao(message: telebot.types.Message):
    bot.reply_to(message, 'https://www.getmonero.org')


# bot.polling(none_stop=True)
bot.infinity_polling()
